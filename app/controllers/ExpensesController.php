<?php

namespace login\Controllers;

use login\Auth\AuthException;
use login\Forms\AddExpensesForm;
use Phalcon\Mvc\Model\Criteria;
use Phalcon\Paginator\Adapter\Model as Paginator;
use login\Models\Expenses;


class ExpensesController extends ControllerBase
{

    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
    }

    /**
     * Index action
     */
    public function indexAction()
    {
        $form = new AddExpensesForm();
        $id= $this->midMan->getCurrentUserID();
        var_dump($id);
        //$numberPage = 1;
            $numberPage = $this->request->getQuery("page", "int");

            //$id =6;
        $expenses = Expenses::find(["conditions" => " userId = :userId:",
                         'bind'=> ['userId'=>$id]]);

        if (count($expenses) == 0) {
            $this->flash->notice(" Please add new expenses");

        }

        if($this->request->isPost()){
            try {
                var_dump($this->request->getPost());
                if ($form->isValid($this->request->getPost())) {
                    $newExpense = $this->request->getPost('expenses');

                    $expense = new Expenses(['title'=>$newExpense,'userId' => $id]);
                    if($expense->save()){
                        $this->flash->success('new Expenses Added ');
                        $this->response->redirect('expenses');
                    }
                    else{
                        $this->flash->error('failed to add new item');
                        $this->response->redirect('expenses');
                    }
                }
            }catch(AuthException $e){
                $this->flash->error($e->getMessage());
            }


        }


        $this->view->page = $expenses;

        $this->view->form = $form;
    }

    /**
     * Displays the creation form
     */
    public function newAction()
    {

    }



    /**
     * Creates a new expense
     */
    public function createAction()
    {
        if (!$this->request->isPost()) {
            $this->dispatcher->forward([
                'controller' => "expenses",
                'action' => 'index'
            ]);

            return;
        }

        $expense = new Expenses();
        $expense->title = $this->request->getPost("title");
        $expense->user_id = $this->request->getPost("user_id");
        

        if (!$expense->save()) {
            foreach ($expense->getMessages() as $message) {
                $this->flash->error($message);
            }

            $this->dispatcher->forward([
                'controller' => "expenses",
                'action' => 'new'
            ]);

            return;
        }

        $this->flash->success("expense was created successfully");

        $this->dispatcher->forward([
            'controller' => "expenses",
            'action' => 'index'
        ]);
    }

    /**
     * Deletes a expense
     *
     * @param string $id
     */
    public function deleteAction($id)
    {
        $expense = Expenses::findFirstByid($id);
        if (!$expense) {
            $this->flash->error("expense was not found");

            $this->dispatcher->forward([
                'controller' => "expenses",
                'action' => 'index'
            ]);

            return;
        }

        if (!$expense->delete()) {

            foreach ($expense->getMessages() as $message) {
                $this->flash->error($message);
            }

            $this->dispatcher->forward([
                'controller' => "expenses",
                'action' => 'search'
            ]);

            return;
        }

        $this->flash->success("expense was deleted successfully");

        $this->dispatcher->forward([
            'controller' => "expenses",
            'action' => "index"
        ]);
    }


    public function getWeekForExpenses($id){
        $expenses = Expenses::find(["conditions" => " userId = :userId:",
            'bind'=> ['userId'=>$id]]);

        if (count($expenses) == 0) {
            $this->flash->notice(" Please add new expenses");
        }


        //create an array for each of the expenses
        $arrGerd = array();
        foreach ($expenses as $expenditure){
            $arrGerd[$expenditure->title] = array();
        }



    }

}
