<?php

namespace login\Controllers;

use login\Models\Record;
use login\Models\Week;
use Phalcon\Mvc\Model\Criteria;
use Phalcon\Paginator\Adapter\Model as Paginator;


class WeekController extends ControllerBase
{
    public function initialize()
    {
      //  parent::initialize(); // TODO: Change the autogenerated stub
    }

    /**
     * Index action
     */
    public function indexAction()
    {

        $this->persistent->userId = $this->midMan->getCurrentUserID();
        $userId=  $this->persistent->userId;

       $numberPage = $this->request->getQuery("page", "int");
        $week = Week::find(['conditions'=> 'userID = :userId: ','bind' => ['userId' => $userId]]);
        if (count($week) == 0) {
            $this->flash->notice("The  did not find any week");

            $this->dispatcher->forward([
                "controller" => "week",
                "action" => "index"
            ]);

            return;
        }

        $paginator = new Paginator([
            'data' => $week,
            'limit'=> 10,
            'page' => $numberPage
        ]);

        $this->view->page = $paginator->getPaginate();
    }


    public function viewAction($weekId){
        $userId=  $this->persistent->userId;
        $week = Week::findFirstById($weekId);
        if($week == false){
            $this->flash->notice(" select a valid week");
            $this->dispatcher->forward([
                'controller' => 'week',
                'action' => 'index'
            ]);
            return;
        }
        else{
            $total= $week->totalAmount;
            $records = Record::find(['conditions'=>' userId = :userId: AND weekId = :weekId: '
                                   ,'bind'=>['userId' => $userId,'weekId' => $weekId]]);

            if(count($records)==0){
                $this->flash->error(' Please ensure the week exists');
                $this->dispatcher->forward([
                    'controller' => 'week',
                    'action' => 'index'
                ]);
                return;
            }

        }

        $this->view->total = $total;
        $this->view->weekName = $week->name;
        $this->view->records = $records;
    }

    /**
     * Displays the creation form
     */
    public function newAction()
    {

    }

    /**
     * Edits a week
     *
     * @param string $id
     */
    public function editAction($id)
    {
        if (!$this->request->isPost()) {

            $week = Week::findFirstByid($id);
            if (!$week) {
                $this->flash->error("week was not found");

                $this->dispatcher->forward([
                    'controller' => "week",
                    'action' => 'index'
                ]);

                return;
            }

            $this->view->id = $week->id;

            $this->tag->setDefault("id", $week->id);
            $this->tag->setDefault("name", $week->name);
            $this->tag->setDefault("userID", $week->userID);
            $this->tag->setDefault("monthId", $week->monthId);
            $this->tag->setDefault("year", $week->year);
            $this->tag->setDefault("month", $week->month);
            
        }
    }

    /**
     * Creates a new week
     */
    public function createAction()
    {
        if (!$this->request->isPost()) {
            $this->dispatcher->forward([
                'controller' => "week",
                'action' => 'index'
            ]);

            return;
        }

        $week = new Week();
        $week->name = $this->request->getPost("name");
        $week->userID = $this->request->getPost("userID");
        $week->monthId = $this->request->getPost("monthId");
        $week->year = $this->request->getPost("year");
        $week->month = $this->request->getPost("month");
        

        if (!$week->save()) {
            foreach ($week->getMessages() as $message) {
                $this->flash->error($message);
            }

            $this->dispatcher->forward([
                'controller' => "week",
                'action' => 'new'
            ]);

            return;
        }

        $this->flash->success("week was created successfully");

        $this->dispatcher->forward([
            'controller' => "week",
            'action' => 'index'
        ]);
    }

    /**
     * Saves a week edited
     *
     */
    public function saveAction()
    {

        if (!$this->request->isPost()) {
            $this->dispatcher->forward([
                'controller' => "week",
                'action' => 'index'
            ]);

            return;
        }

        $id = $this->request->getPost("id");
        $week = Week::findFirstByid($id);

        if (!$week) {
            $this->flash->error("week does not exist " . $id);

            $this->dispatcher->forward([
                'controller' => "week",
                'action' => 'index'
            ]);

            return;
        }

        $week->name = $this->request->getPost("name");
        $week->userID = $this->request->getPost("userID");
        $week->monthId = $this->request->getPost("monthId");
        $week->year = $this->request->getPost("year");
        $week->month = $this->request->getPost("month");
        

        if (!$week->save()) {

            foreach ($week->getMessages() as $message) {
                $this->flash->error($message);
            }

            $this->dispatcher->forward([
                'controller' => "week",
                'action' => 'edit',
                'params' => [$week->id]
            ]);

            return;
        }

        $this->flash->success("week was updated successfully");

        $this->dispatcher->forward([
            'controller' => "week",
            'action' => 'index'
        ]);
    }

    /**
     * Deletes a week
     *
     * @param string $id
     */
    public function deleteAction($id)
    {
        $week = Week::findFirstByid($id);
        if (!$week) {
            $this->flash->error("week was not found");

            $this->dispatcher->forward([
                'controller' => "week",
                'action' => 'index'
            ]);

            return;
        }

        if (!$week->delete()) {

            foreach ($week->getMessages() as $message) {
                $this->flash->error($message);
            }

            $this->dispatcher->forward([
                'controller' => "week",
                'action' => 'search'
            ]);

            return;
        }

        $this->flash->success("week was deleted successfully");

        $this->dispatcher->forward([
            'controller' => "week",
            'action' => "index"
        ]);
    }

}
