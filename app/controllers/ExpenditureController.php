<?php

namespace login\Controllers;
use login\Auth\AuthException;
use login\Models\Expenditure;
use login\Models\Expenses;
use login\Models\Record;
use login\Models\Week;

class ExpenditureController extends ControllerBase
{
    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->persistent->id=$this->midMan->getCurrentUserID();
    }


    public function indexAction()
    {
       $this->persistent->id=$this->midMan->getCurrentUserID();

    }


    /**
     * @return Expenses|Expenses[]
     */
    public function getAllExpenses(){
        //this get all the expenses of a user
        $userId =$this->midMan->getCurrentUserID();
        $expensesList = Expenses::find(['conditions'=>' userId = :userId:',
                       'bind'=>['userId'=>$userId]]);

        if(count($expensesList)==0){
            //return this to the record index page
            $this->flash->error('Please enter a valid userId and try again');
            $this->response->redirect('index');
            return;
        }
        return $expensesList;

    }

    /**
     * Get All the record associated with a week
     * @param $weekId
     * @return Record|Record[]
     */
    public function getAllRecords($weekId){

        $userId=$this->midMan->getCurrentUserID();

        $recordsList= Record::find(['conditions' =>' userId = :userId: AND weekId = :weekId:',
                     'bind'=>['userId'=>$userId,'weekId'=>$weekId]]);
        if(count($recordsList)==0){
            $this->flash->error('Please enter a valid week and try again');
            $this->response->redirect('index');
            return;
        }
        return $recordsList;
    }


    /**
     * this gets the expenditures associated with a record_name and e name
     * @param $expense_name
     * @param $record_type
     * @return Expenditure
     */
    public function getExpenditureAssocRecord($expense_name,$recordId){
        $expenditure = Expenditure::findFirst(['conditions'=>'type = :name: AND recordId = :recordId:',
                           'bind' =>['name'=>$expense_name,'recordId'=> $recordId]]);

        if(($expenditure)==false){
            //$this->flash->error('Please enter a valid week and try again');
            //$this->response->redirect('index');

            return;
        }

        return $expenditure;
    }



    /**
     * this returns all the expenditures with their associated record and amount and name
     * @param $weekId
     * @return array
     */
    public function getExpendituresAssocWeek($weekId){
        $expenditureList = array();

        $expensesList = $this->getAllExpenses();
        $recordList = $this->getAllRecords($weekId);
        $weekSum =0;

        foreach ($expensesList as $expenses){
            $total = 0;
            $expenditure = '';
            foreach ($recordList as $record){
                $expenditure = $this->getExpenditureAssocRecord($expenses->title,$record->id);
                if($expenditure){
                    $total += $expenditure->totalAmount;
                } // if expenditure exist

            }
            $expenditureList[$expenditure->type]= ['total' => $total,
                                                     'weekId'=>$weekId];
            $weekSum +=$total;
        }

        $expenditureList['Total'] = ['total' => $weekSum,'weekId'=>$weekId];
        return $expenditureList;
    }

    /**
     * Get the ids of all records that contain a commodity
     * it gets all records with the associated amount spent on the commodity
     * @param $expense_name
     * @return array
     * @throws AuthException
     */
    public function getAllRecordIDsAssocExpenditure($expense_name,$weekId){
        $expenditureList = Expenditure::find(['conditions'=>' type = :name:',
                                       'bind'=>['name' => $expense_name]]);
        if(count($expenditureList)==0){
        throw new AuthException('Please enter a valid expense name');}
        //expenditure model needs a user id and week id -- above case is very expensive
        $records = array();


        //scans for the records using their IDs in the specified week
        $index = 0;
        foreach ($expenditureList as $expenditure){
            $record = Record::findFirst(['conditions' => 'id = :id: and weekId = :weekId:',
                                         'bind'=>['id'=>$expenditure->recordId,
                                                   'weekId'=>$weekId]]);
            $records[$record->name] = [
                                       'id'=> $record->id,
                                       'amount' => $expenditure ->totalAmount,
                                        'name' => $record -> name,
                                        'day'  => $record->day
            ];
        }

        return $records;
    }


    /**
     * Get the ids of all records that contain a commodity
     * it adds all the amount related
     * @param $expense_name
     * @return double
     * @throws AuthException
     */
    public function getTotalWeekAssocExpenditure($expense_name,$weekId){

        //this var stores the total for an expenditure in a week
        $total = 0;


        //getAll records associated with a weekId
        $records = Record::find(['conditions'=>'weekId = :weekId:',
                           'bind'=>['weekId'=>$weekId]]);

        //if(count($records)==0){
          //  throw new AuthException('Please enter a valid expense name');}
        //expenditure model needs a user id and week id -- above case is very expensive

         //scans through the records list using the expense_name var

        foreach ($records as $record){
            $expenditure  = Expenditure::findFirst(['conditions'=>'type = :expense_name: AND recordId = :recordId:',
                                        'bind'=>['expense_name'=>$expense_name,'recordId' => $record->id]]);
            $total += $expenditure->totalAmount;
        }


        return $total;
    }

    /**
     * this sums the amount of spent on this expense in the course of a week
     * @param $expense_name
     * @param $weekId
     * @return float|int
     * @throws AuthException
     */

    public function getExpenseAmountAssocWeek($expense_name,$weekId){


        $records = Record::find(['conditions'=>'weekId = :weekId:',
            'bind'=>['weekId'=>$weekId]]);

        $total =0;
        foreach ($records as $record){
            $expenditureList = Expenditure::find(['conditions'=>' type = :name: AND recordId = :recordId:',
                'bind'=>['name' => $expense_name,'recordId'=>$record->id]]);
//            if(count($expenditureList)==0){
//                throw new AuthException('Please enter a valid expense name');}

            foreach($expenditureList as $expenditure){

                $total += $expenditure->totalAmount;
            }

        }


        return $total;
    }

    //this scans the record list for all records associated with a record name and a week
    //this passes expenditure commodity and their total in a week to the view
    //it adds up all money(amount) spent on each commodity in a week using their value in record
    public function getAllRecordsAssocExpenditureInAWeek($expense_name,$weekId){
        //$this->getAllRecordIDsAssocExpenditure()
    }


    /**
     * this section handles month a
     * @param $monthId
     * @return Week|Week[]
     * @throws AuthException
     */
    public function getAllWeeksAssocMonth($monthId){

        $weeks = Week::find(['conditions'=>' monthId = :monthId: AND userID = :userId:',
                             'bind'=>[ 'monthId' => $monthId,'userId'=>$this->persistent->id ]]);


        if(count($weeks)==0){
            throw  new AuthException('Wrong parameter supplied');
        }

        return $weeks;
    }


    /**
     * get the amount spent on a commodity in a month
     * @param $monthId
     * @param $expense_name
     * @return float|int
     */
    public function getExpenseAmountAssocMonth($monthId,$expense_name){



        //retrieve the list of all the weeks associated with a month
        $weeks = $this->getAllWeeksAssocMonth($monthId);

        //get the total spending of  each commodity in a week
        //-- declare a variable called total
        $total = 0;

        foreach($weeks as $week){

             $total += $this->getTotalWeekAssocExpenditure($expense_name,$week->id);

        }

        return $total;
    }

    /**
     * returns the list of all the expenses associated with a month and the total
     * @param $monthId
     * @return array
     * @throws AuthException
     */
    public function getAllExpenseAssocMonth($monthId){
        $expenseList = $this->getAllExpenses();
        $expenseArray = array();

        $monthSum = 0;

        if($monthId<1 || $monthId >12){
            throw new AuthException('you have entered an invalid month');
        }

        foreach ($expenseList as $item){
            $monthSum += $this->getExpenseAmountAssocMonth($monthId,$item->title);

            $expenseArray[$item->title] = ['expense_id'=>$item->id,
                                            'monthId' => $monthId,
                                           'total'=>$this->getExpenseAmountAssocMonth($monthId,$item->title)];
        }
        $expenseArray['total'] = [
            'total'=>$monthSum];

        return $expenseArray;

    }

    /**
     * @description retrieve all weeks associated with that month
     * @param $expenseId
     * @param $monthId
     * @return array
     * @throws AuthException
     */
    public function getAllWeeksAssocMonthExpense($expenseId,$monthId){
        //retrieve all weeks associated with that month

        //get the expense name from the expense id
        $expense = Expenses::findFirst(['conditions'=>'id = :expenseId:',
                                        'bind'=>['expenseId'=>$expenseId]]);

        if($expense == false){
            throw new AuthException('Please check the expense id and try again');
        }
        $expense_name = $expense->title;
        $weeks = $this->getAllWeeksAssocMonth($monthId);
        $data = array();

        foreach ($weeks as $week){

            $data[$week->name] = ['name' => $week->name,
                                   'weekId' => $week->id,
                                  'total' => $this->getExpenseAmountAssocWeek($expense_name,$week->id)];
        }

        return $data;
    }


    /**
     * this is shows data  for the current week
     */
    public function weekAction(){
        //get the current week index
        $session = $this->session->get('date-data');
        $weekId = $session['weekId'];
        $weekName = $session['weekName'];

        if(!isset($weekId)){
            $this->flash->error('week is not set ');
            $this->dispatcher->forward([
               'controller' => 'record',
                'action' => 'index'
            ]);
        }

        $this->view->weekId = $weekName;
        $this->view->expenditures = $this->getExpendituresAssocWeek($weekId);
    }


    /**
     * @param $data
     */
    public function weekrecordAction($data){

        $data = explode("-",$data);
        $expense_name = $data[0];
        $weekId = $data[1];

        if(!isset($weekId)){
            $this->flash->error('week is not set ');
            $this->dispatcher->forward([
                'controller' => 'record',
                'action' => 'index'
            ]);
        }

        $this->view->expense_name = $expense_name;
        $this->view->records = $this->getAllRecordIDsAssocExpenditure($expense_name,$weekId);

    }


    public function monthAction(){
        $session = $this->session->get('date-data');
        $monthIndex = $session['monthIndex'];
        $monthName = $session['monthName'];

        if(!isset($monthIndex)){
            $this->flash->error('month is not set ');
            $this->dispatcher->forward([
                'controller' => 'record',
                'action' => 'index'
            ]);
        }

        $this->view->monthName = $monthName;
        $this->view->expenditures = $this->getAllExpenseAssocMonth($monthIndex);

    }


    public function monthexpenseAction($data){

        $data = explode("-",$data);
        $expense_name = $data[0];
        $expense_id = $data[1];
        $monthId = $data[2];

        if(!isset($monthId)){
            $this->flash->error('month is not set ');
            $this->dispatcher->forward([
                'controller' => 'record',
                'action' => 'index'
            ]);
        }

        $this->view->expense_name = $expense_name;
        $this->view->expense_id = $expense_id;
        $this->view->weeks = $this->getAllWeeksAssocMonthExpense($expense_id,$monthId);

    }
}

